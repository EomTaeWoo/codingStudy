package ThisCodingTest.Implementation;

import java.util.Scanner;

public class Chap01 {

	public static void main(String[] args) {
		// 상하좌우 문제
		//문제 설명
		/*
		여행가 A는 N * N 크기의 정사각형 공간 위에 서 있습니다. 이 공간은 1 * 1 크기의 정사각형으로
		나누어져 있습니다. 가장 왼쪽 위 좌표는 (1,1)이며, 가장 오른쪽 아래 좌표는 (N,N)에 해당합니다.
		여행가 A는 상, 하, 좌, 우 방향으로 이동할 수 이씅며, 사작 좌표는 항상(1,1) 입니다. 우리 앞에는
		A가 이동 할 계확이 적힌 계확서가 있습니다.
		계획서에는 하나의 줄에 띄어쓰기를 기준으로 하여 L, R, U, D 중 하나의 문자가 반복적으로 적혀 있습니다.
		각 문자의 의미는 다음과 같습니다.
		L : 왼쪽으로 한 칸 이동
		R : 오른쪽으로 한 칸 이동
		U : 위로 한 칸 이동
		D : 아래로 한 칸 이동
		*/
		Scanner sc = new Scanner(System.in);
		
		//N을 입력받기
		int n = sc.nextInt();
		sc.nextLine();
		String[] plans = sc.nextLine().split(" ");
		int x = 1, y = 1;
		
		// L,R,U,D 에 따른 이동 방향
		int[] dx = {0,0,-1,1};
		int[] dy = {-1,1,0,0};
		char[] moveTypes = {'L','R','U','D'};
		
		//이동 계획을 하나씩 확인
		for(int i = 0; i < plans.length; i ++) {
			char plan = plans[i].charAt(0);
			//이동 후 좌표 구하기
			int nx = -1, ny = -1;
			for(int j = 0; j < 4; j ++) {
				if(plan == moveTypes[j]) {
					nx = x + dx[j];
					ny = y + dy[j];
				}
			}
			
			//공간을 벗어나는 경우 무시
			if(nx < 1 || ny < 1 || nx > n || ny > n) continue;
			//이동 수행
			x = nx;
			y = ny;
		}
		System.out.println(x + " " + y);
	}

}
